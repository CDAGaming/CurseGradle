import de.undercouch.gradle.tasks.download.Download

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath fileTree(dir: projectDir, include: ['CurseGradle*.jar'])
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'de.undercouch.download' version '5.2.1'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'com.matthewprenger.cursegradle'

repositories {
	mavenLocal()
	mavenCentral()
}

version = '1.0'
group = 'com.matthewprenger.cursegradletestplugin'
archivesBaseName = 'cursegradletestplugin'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

configurations {
	plugin {
		transitive = false
	}
	compileOnly.extendsFrom(plugin)
}

dependencies {
    implementation group: 'org.spigotmc', name: 'spigot-api', version: '1.16.5-R0.1-SNAPSHOT'
    implementation group: 'org.spigotmc', name: 'spigot', version: '1.16.5-R0.1-SNAPSHOT'
}

compileJava.dependsOn {
	buildSpigot
}

task setupDevServer(dependsOn: 'extractServerJar', type: Copy) {
	from 'config/serverfiles'
	into 'run'
}

task extractServerJar(type: Copy) {
	from {
		configurations.runtime
	}
	include('spigot-' + '1.16.5-R0.1-SNAPSHOT' + '.jar')
	rename('spigot-' + '1.16.5-R0.1-SNAPSHOT' + '.jar', 'server.jar')
	into 'run'
}

task copyPluginToTestserver(dependsOn: ['build'], type: Copy) {
	from "${buildDir}/libs"
	into 'run/plugins'
}

task extractDependencyPlugins(type: Copy) {
	from {
		configurations.plugin
	}
    into 'run/plugins'
}

task prepareDevServer(dependsOn: ['buildSpigot', 'setupDevServer', 'copyPluginToTestserver', 'extractDependencyPlugins']) {}

task startDevServer(dependsOn: [prepareDevServer], type: JavaExec) {
	classpath configurations.compileClasspath, configurations.runtimeClasspath
    mainClass.set('org.bukkit.craftbukkit.Main')
    workingDir = 'run'
	standardInput = System.in
}

def spigotBuildDir = new File("$buildDir/spigot/")

task setupWorkspace(dependsOn: ['buildSpigot']) {
}

task buildSpigot(type: JavaExec) {
	if (hasSpigot()) {
		enabled = false
		dependsOn = []
	} else {
		dependsOn = ['cleanSpigotBuild', 'downloadBuildTool']
	}
	mainClass.set('-jar')
	args new File(spigotBuildDir, 'BuildTools.jar').getAbsolutePath(), '--rev', '1.16.5'
	workingDir = spigotBuildDir
}

task downloadBuildTool(type: Download) {
	spigotBuildDir.mkdirs()
	src 'https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/artifact/target/BuildTools.jar'
	dest new File(spigotBuildDir, 'BuildTools.jar')
}

task cleanSpigotBuild() {
	spigotBuildDir.deleteDir()
}

def hasSpigot() {
    def groupId = 'org.spigotmc'
    def version = '1.16.5-R0.1-SNAPSHOT'
    return hasArtifact(groupId, 'spigot-api', version) && hasArtifact(groupId, 'spigot', version)
}

def hasArtifact(groupId, artifactId, version) {
	def localMavenRepo = new File(new File(ant.properties['user.home'] as String), '.m2/repository/')
	def file = new File(localMavenRepo, groupId.replace('.', '/') + '/' + artifactId + '/' + version + '/')
	return file.exists()
}

task javadocJar(type: Jar, dependsOn: javadoc) {
   from javadoc.destinationDir
   classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
   from sourceSets.main.allSource
   classifier = 'sources'
}

artifacts {
   archives jar
   archives javadocJar
   archives sourcesJar
}

assemble.dependsOn javadocJar, sourcesJar

curseforge {
    apiKey = System.getenv('CURSEFORGE_API_KEY') ?: 'unset'
    options {
        debug = true
        bukkitIntegration = true
    }
    project {
        id = '70690'
        changelog = 'Changes'
        releaseType = 'alpha'

        // A version must be added here for non-standard integrations
        addGameVersion '1.16.5'

        mainArtifact(jar) {
            displayName = "My Test Plugin version $version"
        }

        addArtifact(javadocJar) {
            displayName = "My Test Plugin Javadoc version $version"
        }

        addArtifact(sourcesJar) {
            displayName = "My Test Plugin Sources version $version"
        }
    }
}